{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('actoin :', action);\n          _context.prev = 1;\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.respond.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 8]]);\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS'\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.respond.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/LEC/myStudy/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","delay","fork","put","takeLatest","axios","logInAPI","post","logOutAPI","action","console","log","type","data","respond"],"mappings":";;oDAUUA,K;qDAiBAC,M;qDAcAC,U;qDAIAC,W;qDAIeC,Q;;AAjDzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AACD,SAASC,SAAT,GAAqB;AACnB,SAAOH,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;AADF;AAAA;AAII,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAKI,iBAAME,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAE,gBADE;AAERC,YAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,WAAD,CAAT;;AALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUI,iBAAMV,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAE,gBADE;AAERC,YAAAA,IAAI,EAAE,YAAIC,OAAJ,CAAYD;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUjB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAME,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAE;AADE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMT,GAAG,CAAC;AACRS,YAAAA,IAAI,EAAE,iBADE;AAERC,YAAAA,IAAI,EAAE,aAAIC,OAAJ,CAAYD;AAFV,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUhB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAAC,iBAAD,EAAoBR,MAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRE,IAAI,CAACL,UAAD,CADI,EAERK,IAAI,CAACJ,WAAD,CAFI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nfunction logInAPI() {\r\n  return axios.post('/api/login');\r\n}\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logIn(action) {\r\n  console.log('actoin :', action);\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: 'LOG_IN_SUCCESS',\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: 'LOG_IN_FAILURE',\r\n      data: err.respond.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: 'LOG_OUT_SUCCESS',\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: 'LOG_OUT_FAILURE',\r\n      data: err.respond.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLogIn() {\r\n  yield takeLatest('LOG_IN_REQUEST', logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}