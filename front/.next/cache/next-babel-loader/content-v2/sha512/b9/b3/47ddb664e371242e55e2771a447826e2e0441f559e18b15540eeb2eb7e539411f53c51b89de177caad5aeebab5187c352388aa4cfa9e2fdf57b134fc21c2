{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signup');\n}\n\nfunction* logIn(action) {\n  console.log('actoin :', action);\n\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.respond.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.respond.data\n    });\n  }\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.respond.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/LEC/myStudy/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logInAPI","post","logOutAPI","signUpAPI","logIn","action","console","log","type","data","err","error","respond","logOut","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,GAAoB;AAClB,SAAOV,KAAK,CAACW,IAAN,CAAW,YAAX,CAAP;AACD;;AACD,SAASC,SAAT,GAAqB;AACnB,SAAOZ,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,SAASE,SAAT,GAAqB;AACnB,SAAOb,KAAK,CAACW,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;;AACA,MAAI;AACF;AACA,UAAMnB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEf,cADE;AAERgB,MAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,UAAMtB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,cADE;AAERoB,MAAAA,KAAK,EAAED,GAAG,CAACE,OAAJ,CAAYH;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUI,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAM3B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEZ;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOc,GAAP,EAAY;AACZ,UAAMtB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEd,eADE;AAERiB,MAAAA,KAAK,EAAED,GAAG,CAACE,OAAJ,CAAYH;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUK,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAM5B,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEV;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAOY,GAAP,EAAY;AACZ,UAAMtB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAET,eADE;AAERY,MAAAA,KAAK,EAAED,GAAG,CAACE,OAAJ,CAAYH;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUM,UAAV,GAAuB;AACrB,QAAM1B,UAAU,CAACG,cAAD,EAAiBY,KAAjB,CAAhB;AACD;;AAED,UAAUY,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACM,eAAD,EAAkBkB,MAAlB,CAAhB;AACD;;AACD,UAAUI,WAAV,GAAwB;AACtB,QAAM5B,UAAU,CAACQ,eAAD,EAAkBiB,MAAlB,CAAhB;AACD;;AACD,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CACRE,IAAI,CAAC4B,UAAD,CADI,EAER5B,IAAI,CAAC6B,WAAD,CAFI,EAGR7B,IAAI,CAAC8B,WAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI() {\r\n  return axios.post('/api/login');\r\n}\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signup');\r\n}\r\n\r\nfunction* logIn(action) {\r\n  console.log('actoin :', action);\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.respond.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.respond.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.respond.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}